def print_board(board):
    for row in board:
        print(" ".join(row))

def is_safe(board, row, col, N):
    for i in range(col):
        if board[row][i] == 'Q':
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False
    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False
    return True

def solve_n_queens(board, col, N, solutions):
    if col == N:
        solutions.append([row[:] for row in board])
        return
    for i in range(N):
        if is_safe(board, i, col, N):
            board[i][col] = 'Q'
            solve_n_queens(board, col + 1, N, solutions)
            board[i][col] = '.'

def n_queens(N):
    board = [['.' for _ in range(N)] for _ in range(N)]
    solutions = []
    solve_n_queens(board, 0, N, solutions)
    return solutions

def visualize_solution(N):
    solutions = n_queens(N)
    for idx, solution in enumerate(solutions):
        print(f"Solution {idx + 1}:")
        print_board(solution)
        print()
